<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>CS 21: Computer Organization and Assembly Language Programming</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

		<link rel="stylesheet" href="/css/reveal.css">
		<link rel="stylesheet" href="/css/theme/tope.css" id="theme">

		<!-- Code syntax highlighting -->
		<link rel="stylesheet" href="/lib/css/zenburn.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? '/css/print/pdf.css' : '/css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>
        <script src="/js/Chart.js"></script>
		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
				<section>
					<h2>CS 21: Computer Organization and Assembly Language Programming</h2>
					<h3>Register-Register Operations</h3>
					<p class="center">
						<a href="mailto:kedelaspenas@up.edu.ph">Kristofer E. delas Pe&ntilde;as</a>
					</p>
				</section>

				<section>
					<h2>Outline</h2>
                    <ol>
                        <li>MIPS Registers</li>
                        <li>Syscalls</li>
                        <li>Register-Register Operation Instructions</li>
                    </ol>
				</section>

				<section>
					<h2>MIPS <span class="green">Registers</span></h2>
				</section>

				<section>
					<h2>Registers</h2>
                    <p class="center">Local <span class="green">storage structures</span> of the processor</p>
                    <p class="center">Fabricated in the same chip as the <span class="green">ALU</span></p>
                    <p class="center">Available in <span class="green">limited</span> numbers</p>
				</section>

				<section>
					<h2><span class="green">MIPS R2000/R3000</span> Registers</h2>
                    <p class="center"><span class="green">32</span> registers - <span class="green">31</span> of which are <span class="green">general-purpose</span></p>
				</section>

				<section>
					<h2><span class="green">MIPS R2000/R3000</span> Registers</h2>
                    <h3>Register <span class="green">Usage Convention</span></h3>
                    <table>
                        <tr>
                            <th>Symbolic Name</th>
                            <th>Register Number</th>
                            <th>Usage</th>
                        </tr>
                        <tr>
                            <td>zero</td>
                            <td>0</td>
                            <td>Constant 0</td>
                        </tr>
                        <tr>
                            <td>at</td>
                            <td>1</td>
                            <td>Reserved for the assembler</td>
                        </tr>
                        <tr>
                            <td>v0 - v1</td>
                            <td>2 - 3</td>
                            <td>Result registers</td>
                        </tr>
                        <tr>
                            <td>a0 - a3</td>
                            <td>4 - 7</td>
                            <td>Argument registers</td>
                        </tr>
                        <tr>
                            <td>t0 - t9</td>
                            <td>8 - 15, 24 - 25</td>
                            <td>Temporary registers</td>
                        </tr>
                        <tr>
                            <td>s0 - s7</td>
                            <td>16 - 23</td>
                            <td>Saved registers</td>
                        </tr>
                        <tr>
                            <td>k0 - k1</td>
                            <td>26 - 27</td>
                            <td>Kernel registers</td>
                        </tr>
                        <tr>
                            <td>gp</td>
                            <td>28</td>
                            <td>Global pointer</td>
                        </tr>
                        <tr>
                            <td>sp</td>
                            <td>29</td>
                            <td>Stack pointer</td>
                        </tr>
                        <tr>
                            <td>fp</td>
                            <td>30</td>
                            <td>Frame pointer</td>
                        </tr>
                        <tr>
                            <td>ra</td>
                            <td>31</td>
                            <td>Return address</td>
                        </tr>
                    </table>
				</section>

				<section>
					<h2><span class="green">MIPS R2000/R3000</span> Registers</h2>
                    <h3>Register <span class="green">Usage Convention</span></h3>
                    <p class="center">Use the <span class="green">temporary</span> registers as our <span class="green">scratch pad registers</span></p>
                    <p class="center">Messing with registers for which the assembler/SPIM has special uses could lead to <span class="green">unintended consequences</p></p>
                </section>

				<section>
					<h2>SPIM/MARS <span class="green">Syscalls</span></h2>
                    <h3>System Calls</h3>
                    <p class="center">Not real syscalls; just transfer control to a very simple OS ran by SPIM/MARS</p>
                </section>

				<section>
					<h2>SPIM/MARS <span class="green">Syscalls</span></h2>
                    <h3>Syscall Uses</h3>
                    <p class="center"><span class="green">Ending</span> a program</p>
                    <p class="center">Getting <span class="green">input</span> via console</p>
                    <p class="center"><span class="green">Printing</span> contents of registers</p>
                </section>

				<section>
					<h2>SPIM/MARS <span class="green">Syscalls</span></h2>
                    <h3>Steps in using syscalls</h3>
                    <ol>
                        <li>Use the <span class="green">load immediate</li> instruction (li) to load the desired <span class="green">syscall number</span> into register <span class="green">v0</span></li>
                        <li><span class="green">Prepare arguments</span>, if applicable</li>
                        <li>Issue the <span class="green">syscall</span> instruction</li>
                    </ol>
                </section>

				<section>
					<h2>SPIM/MARS <span class="green">Syscalls</span></h2>
                    <h3>Some syscalls</h3>
                    <p class="center">Getting <span class="green">input</span> via console: 5</p>
                    <pre>
                        <code>
    li      $v0,    5
    syscall
                        </code>
                    </pre>
                </section>

				<section>
					<h2>SPIM/MARS <span class="green">Syscalls</span></h2>
                    <h3>Some syscalls</h3>
                    <p class="center"><span class="green">Printing</span> integer from registers: 1</p>
                    <pre>
                        <code>
    li      $v0,    1
    move    $t0,    $a0
    syscall
                        </code>
                    </pre>
                </section>

				<section>
					<h2>SPIM/MARS <span class="green">Syscalls</span></h2>
                    <h3>Some syscalls</h3>
                    <p class="center"><span class="green">Ending</span> a program: 10</p>
                    <pre>
                        <code>
    li      $v0,    10
    syscall
                        </code>
                    </pre>
                </section>

				<section>
					<h2><span class="green">Register-Register</span> Operation Instructions</h2>
                    <p class="center">Instructions that do operations between values that come from <span class="green">two registers</span></p>
                    <p class="center"><span class="green">Two</span> operand registers, <span class="green">one</span> result registers</p>
                </section>

				<section>
					<h2><span class="green">Register-Register</span> Operation Instructions</h2>
                    <pre>
                        <code>
    add     $t3,    $t2,    $t1
                        </code>
                    </pre>
                </section>
			</div>
		</div>

		<script src="/lib/js/head.min.js"></script>
		<script src="/js/reveal.js"></script>
		<script type="text/x-mathjax-config">
			MathJax.Hub.Config({
				tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
			});
		</script>
		<script src="/js/MathJax.js?config=TeX-AMS_HTML-full"></script>

		<script>

			// Full list of configuration options available at:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,
                width: 700,
				transition: 'slide', // none/fade/slide/convex/concave/zoom

				// Optional reveal.js plugins
				dependencies: [
					{ src: '/lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: '/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: '/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: '/plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: '/plugin/zoom-js/zoom.js', async: true },
					{ src: '/plugin/notes/notes.js', async: true }
				]
			});

		</script>

	</body>
</html>
